generator client {
  provider = "prisma-client-js"
  // output   = "../../node_modules/.prisma/client"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Batchs {
  BatchPK   Int       @id @default(autoincrement())
  BatchName String    @unique @db.VarChar(255)
  BatchDate DateTime? @db.Timestamptz(6)
  Plant     String    @db.VarChar(255)
  createdAt DateTime  @db.Timestamptz(6)
  updatedAt DateTime  @db.Timestamptz(6)
}

model TraceBatches {
  id        Int       @id @default(autoincrement())
  BatchPK   Int?
  BatchName String?   @db.VarChar(255)
  BatchDate DateTime? @db.Timestamptz(6)
  Plant     String?   @db.VarChar(255)
  createdAt DateTime  @db.Timestamptz(6)
  updatedAt DateTime  @db.Timestamptz(6)
}

model api_errors {
  id        Int      @id @default(autoincrement())
  dto       String?  @db.VarChar(255)
  message   String?  @db.VarChar(255)
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
}

model apparatuses {
  id      Int       @id @default(autoincrement())
  value   String    @unique @db.VarChar(255)
  records records[]
}

model bases {
  id      Int     @id @default(autoincrement())
  code    String  @unique @db.VarChar(255)
  marking String? @db.VarChar(255)
  boils   boils[]
}

model batchs {
  BatchPK   Int       @id @default(autoincrement())
  BatchName String    @unique @db.VarChar(255)
  BatchDate DateTime? @db.Timestamptz(6)
  Plant     String    @db.VarChar(255)
  createdAt DateTime  @db.Timestamptz(6)
  updatedAt DateTime  @db.Timestamptz(6)
}

model boils {
  id            Int             @id @default(autoincrement())
  value         String          @unique @db.VarChar(255)
  base_id       Int?
  letter        String?         @db.VarChar(255)
  year          Decimal?        @db.Decimal
  number        Decimal?        @db.Decimal
  plant_id      Int?
  bases         bases?          @relation(fields: [base_id], references: [id], onDelete: NoAction)
  semi_products semi_products[]
  tube_records  tube_records[]
  records       records[]
}

model cans {
  id      Int       @id @default(autoincrement())
  value   String    @unique @db.VarChar(255)
  records records[]
}

model conveyors {
  id      Int       @id @default(autoincrement())
  value   String    @unique @db.VarChar(255)
  barcode String?   @db.VarChar(13)
  records records[]
}

model dbo_Batchs {
  BatchPK   Int       @id @default(autoincrement())
  BatchName String    @unique @db.VarChar(255)
  BatchDate DateTime? @db.Timestamptz(6)
  Plant     String    @db.VarChar(255)
  createdAt DateTime  @db.Timestamptz(6)
  updatedAt DateTime  @db.Timestamptz(6)

  @@map("dbo.Batchs")
}

model docs {
  id        Int       @id @default(autoincrement())
  plantId   Int?
  date      DateTime  @db.Timestamptz(6)
  createdAt DateTime  @db.Timestamptz(6)
  updatedAt DateTime  @db.Timestamptz(6)
  plants    plants?   @relation(fields: [plantId], references: [id], onDelete: Cascade)
  records   records[]
}

model employees {
  id             Int              @id @default(autoincrement())
  name           String           @unique @db.VarChar(255)
  barcode        String           @unique @db.VarChar(255)
  occupationId   Int?
  createdAt      DateTime         @db.Timestamptz(6)
  updatedAt      DateTime         @db.Timestamptz(6)
  occupations    occupations?     @relation(fields: [occupationId], references: [id], onDelete: Cascade)
  histories      histories[]
  tube_histories tube_histories[]
  tube_sessions  tube_sessions[]
}

model histories {
  id            Int            @id @default(autoincrement())
  record_id     Int?
  boil_id       Int?
  historyTypeId Int?
  userId        Int?
  employeeId    Int?
  note          String?        @db.VarChar(255)
  createdAt     DateTime       @db.Timestamptz(6)
  updatedAt     DateTime       @db.Timestamptz(6)
  note_id       Int?
  plant_id      Int?
  employees     employees?     @relation(fields: [employeeId], references: [id], onDelete: Restrict)
  history_types history_types? @relation(fields: [historyTypeId], references: [id], onDelete: Cascade)
  records       records?       @relation(fields: [record_id], references: [id], onDelete: Restrict)
  users         users?         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model history_types {
  id          Int         @id @default(autoincrement())
  value       String      @unique @db.VarChar(255)
  description String      @unique @db.VarChar(255)
  for_boil    Boolean?
  histories   histories[]
}

model marking_sample {
  id                 Int                  @id @default(autoincrement())
  value              String?              @db.VarChar(255)
  createdAt          DateTime             @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  record_regulations record_regulations[]
  regulations        regulations[]
}

model notes {
  id    Int     @id @default(autoincrement())
  value String? @db.VarChar(4096)
}

model occupations {
  id          Int         @id @default(autoincrement())
  value       String      @unique @db.VarChar(255)
  description String      @unique @db.VarChar(255)
  employees   employees[]
}

model plants {
  id    Int     @id @default(autoincrement())
  value String  @unique @db.VarChar(255)
  abb   String? @db.VarChar(10)
  docs  docs[]
}

model products {
  id            Int             @id @default(autoincrement())
  code1C        String          @unique @db.VarChar(255)
  marking       String          @db.VarChar(255)
  name          String?         @db.VarChar(255)
  serieId       Int?
  createdAt     DateTime        @db.Timestamptz(6)
  updatedAt     DateTime        @db.Timestamptz(6)
  series        series?         @relation(fields: [serieId], references: [id], onDelete: Cascade)
  records       records[]
  regulations   regulations[]
  semi_products semi_products[]
}

model record_counters {
  id            Int      @id @default(autoincrement())
  record_id     Int?
  task_uid      String   @unique
  counter_value Int
  records       records? @relation(fields: [record_id], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model record_regulations {
  id                    Int             @id @default(autoincrement())
  record_id             Int?
  org_base_min_weight   Decimal?        @db.Decimal
  org_base_max_weight   Decimal?        @db.Decimal
  water_base_min_weight Decimal?        @db.Decimal
  water_base_max_weight Decimal?        @db.Decimal
  per_box               Int?
  box_per_row           Int?
  row_on_pallet         Int?
  gasket                String?         @db.VarChar(255)
  seal                  Boolean?
  technician_note       String?         @db.VarChar(255)
  packaging_note        String?         @db.VarChar(255)
  marking_sample_id     Int?
  inc_color             String?         @db.VarChar(255)
  marking_feature       String?         @db.VarChar(255)
  createdAt             DateTime        @db.Timestamptz(6)
  updatedAt             DateTime        @db.Timestamptz(6)
  marking_sample        marking_sample? @relation(fields: [marking_sample_id], references: [id], onDelete: NoAction)
  records               records?        @relation(fields: [record_id], references: [id], onDelete: Cascade)
}

model records {
  id                 Int                  @id @default(autoincrement())
  doc_id             Int?
  productId          Int?
  boilId             Int?
  apparatusId        Int?
  canId              Int?
  conveyorId         Int?
  plan               Int
  bbf                String               @db.VarChar(255)
  note               String               @db.VarChar(1024)
  workshopId         Int?
  createdAt          DateTime             @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  isSet              Boolean?
  organic_base_id    Int?
  water_base_id      Int?
  dm                 String               @default("-") @db.VarChar(48)
  histories          histories[]
  record_regulations record_regulations[]
  apparatuses        apparatuses?         @relation(fields: [apparatusId], references: [id], onDelete: Cascade)
  cans               cans?                @relation(fields: [canId], references: [id], onDelete: Cascade)
  conveyors          conveyors?           @relation(fields: [conveyorId], references: [id], onDelete: Restrict)
  docs               docs?                @relation(fields: [doc_id], references: [id], onDelete: Cascade)
  products           products?            @relation(fields: [productId], references: [id], onDelete: NoAction)
  workshops          workshops?           @relation(fields: [workshopId], references: [id], onDelete: Cascade)
  boils              boils?               @relation(fields: [boilId], references: [id], onDelete: Cascade)
  semi_products      semi_products[]
  record_counters    record_counters[]
}

model regulations {
  id                    Int             @id @default(autoincrement())
  product_id            Int?
  water_base_min_weight Decimal?        @db.Decimal
  water_base_max_weight Decimal?        @db.Decimal
  per_box               Int?
  box_per_row           Int?
  row_on_pallet         Int?
  gasket                String?         @db.VarChar(255)
  seal                  Boolean?
  technician_note       String?         @db.VarChar(255)
  packaging_note        String?         @db.VarChar(255)
  marking_sample_id     Int?
  createdAt             DateTime        @db.Timestamptz(6)
  updatedAt             DateTime        @db.Timestamptz(6)
  marking_sample        marking_sample? @relation(fields: [marking_sample_id], references: [id], onDelete: Cascade)
  products              products?       @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model roles {
  id          Int          @id @default(autoincrement())
  value       String       @unique @db.VarChar(255)
  description String       @unique @db.VarChar(255)
  user_roles  user_roles[]
}

model semi_products {
  id         Int       @id @default(autoincrement())
  record_id  Int?
  product_id Int?
  boil_id    Int?
  createdAt  DateTime  @db.Timestamptz(6)
  updatedAt  DateTime  @db.Timestamptz(6)
  boils      boils?    @relation(fields: [boil_id], references: [id], onDelete: Cascade)
  products   products? @relation(fields: [product_id], references: [id], onDelete: Cascade)
  records    records?  @relation(fields: [record_id], references: [id], onDelete: Cascade)
}

model series {
  id       Int        @id @default(autoincrement())
  value    String     @unique @db.VarChar(255)
  products products[]
}

model signals {
  id    Int    @id @default(autoincrement())
  value String @unique @db.VarChar(255)
}

model tokens {
  id        Int      @id @default(autoincrement())
  userId    Int?
  token     String   @unique @db.VarChar(2000)
  createdAt DateTime @db.Timestamptz(6)
  updatedAt DateTime @db.Timestamptz(6)
  users     users?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model tube_assembly {
  id                    Int                  @id @default(autoincrement())
  tube_record_id        Int?
  tube_material_id      Int?
  tube_conveyor_post_id Int?
  createdAt             DateTime             @db.Timestamptz(6)
  updatedAt             DateTime             @db.Timestamptz(6)
  tube_conveyor_posts   tube_conveyor_posts? @relation(fields: [tube_conveyor_post_id], references: [id], onDelete: Cascade)
  tube_materials        tube_materials?      @relation(fields: [tube_material_id], references: [id], onDelete: Cascade)
}

model tube_conveyor_posts {
  id            Int             @id @default(autoincrement())
  name          String          @unique @db.VarChar(255)
  tube_assembly tube_assembly[]
}

model tube_conveyors {
  id            Int             @id @default(autoincrement())
  name          String?         @db.VarChar(255)
  barcode       String?         @unique @db.VarChar(255)
  tube_records  tube_records[]
  tube_sessions tube_sessions[]
}

model tube_histories {
  id                   Int                   @id @default(autoincrement())
  tube_record_id       Int?
  tube_history_type_id Int?
  employee_id          Int?
  note                 String?               @db.VarChar(255)
  tube_history_note_id Int?
  createdAt            DateTime              @db.Timestamptz(6)
  updatedAt            DateTime              @db.Timestamptz(6)
  employees            employees?            @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  tube_histories_notes tube_histories_notes? @relation(fields: [tube_history_note_id], references: [id], onDelete: NoAction)
  tube_history_types   tube_history_types?   @relation(fields: [tube_history_type_id], references: [id], onDelete: Cascade)
}

model tube_histories_notes {
  id             Int              @id @default(autoincrement())
  value          String?          @db.VarChar(255)
  tube_histories tube_histories[]
}

model tube_history_types {
  id             Int              @id @default(autoincrement())
  value          String           @unique @db.VarChar(255)
  description    String           @unique @db.VarChar(255)
  tube_histories tube_histories[]
}

model tube_materials {
  id                  Int                   @id @default(autoincrement())
  code_1C             String?               @unique @db.VarChar(255)
  name                String?               @db.VarChar(255)
  tube_assembly       tube_assembly[]
  tube_specifications tube_specifications[]
}

model tube_parameters {
  id                                     Int    @id @default(autoincrement())
  tube_record_id                         Int?
  press_speed_min                        Int?
  press_speed_max                        Int?
  molding_time_min                       Int?
  molding_time_max                       Int?
  turning_automate_speed_min             Int?
  turning_automate_speed_max             Int?
  annealing_furnace_temp_min             Int?
  annealing_furnace_temp_max             Int?
  cap_machine_speed_min                  Int?
  cap_machine_speed_max                  Int?
  cap_machine_air_pressure_min           Float?
  cap_machine_air_pressure_max           Float?
  grips_forward_min                      Int?
  grips_forward_max                      Int?
  grips_opening_left_min                 Int?
  grips_opening_left_max                 Int?
  grips_opening_right_min                Int?
  grips_opening_right_max                Int?
  grips_closing_min                      Int?
  grips_closing_max                      Int?
  injection_start_min                    Int?
  injection_start_max                    Int?
  injection_end_min                      Int?
  injection_end_max                      Int?
  tube_start_position_min                Int?
  tube_start_position_max                Int?
  tube_end_position_min                  Int?
  tube_end_position_max                  Int?
  padding_machine_speed_min              Int?
  padding_machine_speed_max              Int?
  padding_machine_air_pressure_min       Float?
  padding_machine_air_pressure_max       Float?
  padding_furnace_temp_min               Int?
  padding_furnace_temp_max               Int?
  offset_furnace_temp_min                Int?
  offset_furnace_temp_max                Int?
  printer_motor_speed_min                Int?
  printer_motor_speed_max                Int?
  holders_motor_speed_min                Int?
  holders_motor_speed_max                Int?
  station_motor_speed_min                Int?
  station_motor_speed_max                Int?
  ink_injection_time_min                 Float?
  ink_injection_time_max                 Float?
  lacquer_machine_speed_min              Int?
  lacquer_machine_speed_max              Int?
  lacquer_machine_air_pressure_min       Float?
  lacquer_machine_air_pressure_max       Float?
  feed_can_air_pressure_min              Float?
  feed_can_air_pressure_max              Float?
  nozzle_regulator_air_pressure_min      Float?
  nozzle_regulator_air_pressure_max      Float?
  cells_speed_min                        Int?
  cells_speed_max                        Int?
  injection_AB_start_position_min        Int?
  injection_AB_start_position_max        Int?
  injection_CD_start_position_min        Int?
  injection_CD_start_position_max        Int?
  injection_ABCD_end_position_min        Int?
  injection_ABCD_end_position_max        Int?
  tube_molding_start_position_min        Int?
  tube_molding_start_position_max        Int?
  tube_molding_end_position_min          Int?
  tube_molding_end_position_max          Int?
  polimerization_furnace_temperature_min Int?
  polimerization_furnace_temperature_max Int?
}

model tube_products {
  id                  Int                   @id @default(autoincrement())
  code_1C             String?               @unique @db.VarChar(255)
  marking             String?               @db.VarChar(255)
  name                String?               @db.VarChar(255)
  tube_records        tube_records[]
  tube_specifications tube_specifications[]
}

model tube_records {
  id               Int             @id @default(autoincrement())
  tube_product_id  Int?
  tube_conveyor_id Int?
  boil_id          Int?
  plan             Int
  start_date       DateTime?       @db.Date
  active           Boolean?        @default(false)
  finished         Boolean?        @default(false)
  createdAt        DateTime        @db.Timestamptz(6)
  updatedAt        DateTime        @db.Timestamptz(6)
  boils            boils?          @relation(fields: [boil_id], references: [id], onDelete: Cascade)
  tube_conveyors   tube_conveyors? @relation(fields: [tube_conveyor_id], references: [id], onDelete: Cascade)
  tube_products    tube_products?  @relation(fields: [tube_product_id], references: [id], onDelete: Cascade)
}

model tube_sessions {
  id             Int             @id @default(autoincrement())
  conveyor_id    Int?
  employee_id    Int?
  finished       Boolean?        @default(false)
  createdAt      DateTime        @db.Timestamptz(6)
  updatedAt      DateTime        @db.Timestamptz(6)
  tube_conveyors tube_conveyors? @relation(fields: [conveyor_id], references: [id], onDelete: NoAction)
  employees      employees?      @relation(fields: [employee_id], references: [id], onDelete: Cascade)
}

model tube_specifications {
  id               Int             @id @default(autoincrement())
  tube_product_id  Int?
  tube_material_id Int?
  createdAt        DateTime        @db.Timestamptz(6)
  updatedAt        DateTime        @db.Timestamptz(6)
  tube_materials   tube_materials? @relation(fields: [tube_material_id], references: [id], onDelete: Cascade)
  tube_products    tube_products?  @relation(fields: [tube_product_id], references: [id], onDelete: Cascade)
}

model user_roles {
  id     Int   @id @default(autoincrement())
  roleId Int
  userId Int
  roles  roles @relation(fields: [roleId], references: [id], onDelete: Cascade)
  users  users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roleId, userId])
}

model users {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  email      String       @unique @db.VarChar(255)
  password   String       @db.VarChar(255)
  banned     Boolean?     @default(false)
  createdAt  DateTime     @db.Timestamptz(6)
  updatedAt  DateTime     @db.Timestamptz(6)
  histories  histories[]
  tokens     tokens[]
  user_roles user_roles[]
}

model workshops {
  id      Int       @id @default(autoincrement())
  value   String    @unique @db.VarChar(255)
  records records[]
}
