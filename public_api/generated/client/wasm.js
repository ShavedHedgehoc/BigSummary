
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.BatchsScalarFieldEnum = {
  BatchPK: 'BatchPK',
  BatchName: 'BatchName',
  BatchDate: 'BatchDate',
  Plant: 'Plant',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TraceBatchesScalarFieldEnum = {
  id: 'id',
  BatchPK: 'BatchPK',
  BatchName: 'BatchName',
  BatchDate: 'BatchDate',
  Plant: 'Plant',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Api_errorsScalarFieldEnum = {
  id: 'id',
  dto: 'dto',
  message: 'message',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApparatusesScalarFieldEnum = {
  id: 'id',
  value: 'value'
};

exports.Prisma.BasesScalarFieldEnum = {
  id: 'id',
  code: 'code',
  marking: 'marking'
};

exports.Prisma.BatchsScalarFieldEnum = {
  BatchPK: 'BatchPK',
  BatchName: 'BatchName',
  BatchDate: 'BatchDate',
  Plant: 'Plant',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BoilsScalarFieldEnum = {
  id: 'id',
  value: 'value',
  base_id: 'base_id',
  letter: 'letter',
  year: 'year',
  number: 'number',
  plant_id: 'plant_id'
};

exports.Prisma.CansScalarFieldEnum = {
  id: 'id',
  value: 'value'
};

exports.Prisma.ConveyorsScalarFieldEnum = {
  id: 'id',
  value: 'value',
  barcode: 'barcode'
};

exports.Prisma.Dbo_BatchsScalarFieldEnum = {
  BatchPK: 'BatchPK',
  BatchName: 'BatchName',
  BatchDate: 'BatchDate',
  Plant: 'Plant',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocsScalarFieldEnum = {
  id: 'id',
  plantId: 'plantId',
  date: 'date',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmployeesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  barcode: 'barcode',
  occupationId: 'occupationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HistoriesScalarFieldEnum = {
  id: 'id',
  record_id: 'record_id',
  boil_id: 'boil_id',
  historyTypeId: 'historyTypeId',
  userId: 'userId',
  employeeId: 'employeeId',
  note: 'note',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  note_id: 'note_id',
  plant_id: 'plant_id'
};

exports.Prisma.History_typesScalarFieldEnum = {
  id: 'id',
  value: 'value',
  description: 'description',
  for_boil: 'for_boil'
};

exports.Prisma.Marking_sampleScalarFieldEnum = {
  id: 'id',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotesScalarFieldEnum = {
  id: 'id',
  value: 'value'
};

exports.Prisma.OccupationsScalarFieldEnum = {
  id: 'id',
  value: 'value',
  description: 'description'
};

exports.Prisma.PlantsScalarFieldEnum = {
  id: 'id',
  value: 'value',
  abb: 'abb'
};

exports.Prisma.ProductsScalarFieldEnum = {
  id: 'id',
  code1C: 'code1C',
  marking: 'marking',
  name: 'name',
  serieId: 'serieId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Record_countersScalarFieldEnum = {
  id: 'id',
  record_id: 'record_id',
  task_uid: 'task_uid',
  counter_value: 'counter_value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Record_regulationsScalarFieldEnum = {
  id: 'id',
  record_id: 'record_id',
  org_base_min_weight: 'org_base_min_weight',
  org_base_max_weight: 'org_base_max_weight',
  water_base_min_weight: 'water_base_min_weight',
  water_base_max_weight: 'water_base_max_weight',
  per_box: 'per_box',
  box_per_row: 'box_per_row',
  row_on_pallet: 'row_on_pallet',
  gasket: 'gasket',
  seal: 'seal',
  technician_note: 'technician_note',
  packaging_note: 'packaging_note',
  marking_sample_id: 'marking_sample_id',
  inc_color: 'inc_color',
  marking_feature: 'marking_feature',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RecordsScalarFieldEnum = {
  id: 'id',
  doc_id: 'doc_id',
  productId: 'productId',
  boilId: 'boilId',
  apparatusId: 'apparatusId',
  canId: 'canId',
  conveyorId: 'conveyorId',
  plan: 'plan',
  bbf: 'bbf',
  note: 'note',
  workshopId: 'workshopId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isSet: 'isSet',
  organic_base_id: 'organic_base_id',
  water_base_id: 'water_base_id',
  dm: 'dm'
};

exports.Prisma.RegulationsScalarFieldEnum = {
  id: 'id',
  product_id: 'product_id',
  water_base_min_weight: 'water_base_min_weight',
  water_base_max_weight: 'water_base_max_weight',
  per_box: 'per_box',
  box_per_row: 'box_per_row',
  row_on_pallet: 'row_on_pallet',
  gasket: 'gasket',
  seal: 'seal',
  technician_note: 'technician_note',
  packaging_note: 'packaging_note',
  marking_sample_id: 'marking_sample_id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RolesScalarFieldEnum = {
  id: 'id',
  value: 'value',
  description: 'description'
};

exports.Prisma.Semi_productsScalarFieldEnum = {
  id: 'id',
  record_id: 'record_id',
  product_id: 'product_id',
  boil_id: 'boil_id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SeriesScalarFieldEnum = {
  id: 'id',
  value: 'value'
};

exports.Prisma.SignalsScalarFieldEnum = {
  id: 'id',
  value: 'value'
};

exports.Prisma.TokensScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Tube_assemblyScalarFieldEnum = {
  id: 'id',
  tube_record_id: 'tube_record_id',
  tube_material_id: 'tube_material_id',
  tube_conveyor_post_id: 'tube_conveyor_post_id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Tube_conveyor_postsScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.Tube_conveyorsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  barcode: 'barcode'
};

exports.Prisma.Tube_historiesScalarFieldEnum = {
  id: 'id',
  tube_record_id: 'tube_record_id',
  tube_history_type_id: 'tube_history_type_id',
  employee_id: 'employee_id',
  note: 'note',
  tube_history_note_id: 'tube_history_note_id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Tube_histories_notesScalarFieldEnum = {
  id: 'id',
  value: 'value'
};

exports.Prisma.Tube_history_typesScalarFieldEnum = {
  id: 'id',
  value: 'value',
  description: 'description'
};

exports.Prisma.Tube_materialsScalarFieldEnum = {
  id: 'id',
  code_1C: 'code_1C',
  name: 'name'
};

exports.Prisma.Tube_parametersScalarFieldEnum = {
  id: 'id',
  tube_record_id: 'tube_record_id',
  press_speed_min: 'press_speed_min',
  press_speed_max: 'press_speed_max',
  molding_time_min: 'molding_time_min',
  molding_time_max: 'molding_time_max',
  turning_automate_speed_min: 'turning_automate_speed_min',
  turning_automate_speed_max: 'turning_automate_speed_max',
  annealing_furnace_temp_min: 'annealing_furnace_temp_min',
  annealing_furnace_temp_max: 'annealing_furnace_temp_max',
  cap_machine_speed_min: 'cap_machine_speed_min',
  cap_machine_speed_max: 'cap_machine_speed_max',
  cap_machine_air_pressure_min: 'cap_machine_air_pressure_min',
  cap_machine_air_pressure_max: 'cap_machine_air_pressure_max',
  grips_forward_min: 'grips_forward_min',
  grips_forward_max: 'grips_forward_max',
  grips_opening_left_min: 'grips_opening_left_min',
  grips_opening_left_max: 'grips_opening_left_max',
  grips_opening_right_min: 'grips_opening_right_min',
  grips_opening_right_max: 'grips_opening_right_max',
  grips_closing_min: 'grips_closing_min',
  grips_closing_max: 'grips_closing_max',
  injection_start_min: 'injection_start_min',
  injection_start_max: 'injection_start_max',
  injection_end_min: 'injection_end_min',
  injection_end_max: 'injection_end_max',
  tube_start_position_min: 'tube_start_position_min',
  tube_start_position_max: 'tube_start_position_max',
  tube_end_position_min: 'tube_end_position_min',
  tube_end_position_max: 'tube_end_position_max',
  padding_machine_speed_min: 'padding_machine_speed_min',
  padding_machine_speed_max: 'padding_machine_speed_max',
  padding_machine_air_pressure_min: 'padding_machine_air_pressure_min',
  padding_machine_air_pressure_max: 'padding_machine_air_pressure_max',
  padding_furnace_temp_min: 'padding_furnace_temp_min',
  padding_furnace_temp_max: 'padding_furnace_temp_max',
  offset_furnace_temp_min: 'offset_furnace_temp_min',
  offset_furnace_temp_max: 'offset_furnace_temp_max',
  printer_motor_speed_min: 'printer_motor_speed_min',
  printer_motor_speed_max: 'printer_motor_speed_max',
  holders_motor_speed_min: 'holders_motor_speed_min',
  holders_motor_speed_max: 'holders_motor_speed_max',
  station_motor_speed_min: 'station_motor_speed_min',
  station_motor_speed_max: 'station_motor_speed_max',
  ink_injection_time_min: 'ink_injection_time_min',
  ink_injection_time_max: 'ink_injection_time_max',
  lacquer_machine_speed_min: 'lacquer_machine_speed_min',
  lacquer_machine_speed_max: 'lacquer_machine_speed_max',
  lacquer_machine_air_pressure_min: 'lacquer_machine_air_pressure_min',
  lacquer_machine_air_pressure_max: 'lacquer_machine_air_pressure_max',
  feed_can_air_pressure_min: 'feed_can_air_pressure_min',
  feed_can_air_pressure_max: 'feed_can_air_pressure_max',
  nozzle_regulator_air_pressure_min: 'nozzle_regulator_air_pressure_min',
  nozzle_regulator_air_pressure_max: 'nozzle_regulator_air_pressure_max',
  cells_speed_min: 'cells_speed_min',
  cells_speed_max: 'cells_speed_max',
  injection_AB_start_position_min: 'injection_AB_start_position_min',
  injection_AB_start_position_max: 'injection_AB_start_position_max',
  injection_CD_start_position_min: 'injection_CD_start_position_min',
  injection_CD_start_position_max: 'injection_CD_start_position_max',
  injection_ABCD_end_position_min: 'injection_ABCD_end_position_min',
  injection_ABCD_end_position_max: 'injection_ABCD_end_position_max',
  tube_molding_start_position_min: 'tube_molding_start_position_min',
  tube_molding_start_position_max: 'tube_molding_start_position_max',
  tube_molding_end_position_min: 'tube_molding_end_position_min',
  tube_molding_end_position_max: 'tube_molding_end_position_max',
  polimerization_furnace_temperature_min: 'polimerization_furnace_temperature_min',
  polimerization_furnace_temperature_max: 'polimerization_furnace_temperature_max'
};

exports.Prisma.Tube_productsScalarFieldEnum = {
  id: 'id',
  code_1C: 'code_1C',
  marking: 'marking',
  name: 'name'
};

exports.Prisma.Tube_recordsScalarFieldEnum = {
  id: 'id',
  tube_product_id: 'tube_product_id',
  tube_conveyor_id: 'tube_conveyor_id',
  boil_id: 'boil_id',
  plan: 'plan',
  start_date: 'start_date',
  active: 'active',
  finished: 'finished',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Tube_sessionsScalarFieldEnum = {
  id: 'id',
  conveyor_id: 'conveyor_id',
  employee_id: 'employee_id',
  finished: 'finished',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Tube_specificationsScalarFieldEnum = {
  id: 'id',
  tube_product_id: 'tube_product_id',
  tube_material_id: 'tube_material_id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.User_rolesScalarFieldEnum = {
  id: 'id',
  roleId: 'roleId',
  userId: 'userId'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  banned: 'banned',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkshopsScalarFieldEnum = {
  id: 'id',
  value: 'value'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Batchs: 'Batchs',
  TraceBatches: 'TraceBatches',
  api_errors: 'api_errors',
  apparatuses: 'apparatuses',
  bases: 'bases',
  batchs: 'batchs',
  boils: 'boils',
  cans: 'cans',
  conveyors: 'conveyors',
  dbo_Batchs: 'dbo_Batchs',
  docs: 'docs',
  employees: 'employees',
  histories: 'histories',
  history_types: 'history_types',
  marking_sample: 'marking_sample',
  notes: 'notes',
  occupations: 'occupations',
  plants: 'plants',
  products: 'products',
  record_counters: 'record_counters',
  record_regulations: 'record_regulations',
  records: 'records',
  regulations: 'regulations',
  roles: 'roles',
  semi_products: 'semi_products',
  series: 'series',
  signals: 'signals',
  tokens: 'tokens',
  tube_assembly: 'tube_assembly',
  tube_conveyor_posts: 'tube_conveyor_posts',
  tube_conveyors: 'tube_conveyors',
  tube_histories: 'tube_histories',
  tube_histories_notes: 'tube_histories_notes',
  tube_history_types: 'tube_history_types',
  tube_materials: 'tube_materials',
  tube_parameters: 'tube_parameters',
  tube_products: 'tube_products',
  tube_records: 'tube_records',
  tube_sessions: 'tube_sessions',
  tube_specifications: 'tube_specifications',
  user_roles: 'user_roles',
  users: 'users',
  workshops: 'workshops'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
